### YamlMime:JavaScriptReference
items:
  - uid: azure-arm-datalake-store.FileSystem
    id: azure-arm-datalake-store.FileSystem
    name: FileSystem
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem
    type: Class
    children:
      - 'azure-arm-datalake-store.FileSystem.#ctor'
      - 'azure-arm-datalake-store.FileSystem#client'
      - 'azure-arm-datalake-store.FileSystem#_concurrentAppend'
      - 'azure-arm-datalake-store.FileSystem#_setFileExpiry'
      - 'azure-arm-datalake-store.FileSystem#_checkAccess'
      - 'azure-arm-datalake-store.FileSystem#_mkdirs'
      - 'azure-arm-datalake-store.FileSystem#_concat'
      - 'azure-arm-datalake-store.FileSystem#_msConcat'
      - 'azure-arm-datalake-store.FileSystem#_listFileStatus'
      - 'azure-arm-datalake-store.FileSystem#_getContentSummary'
      - 'azure-arm-datalake-store.FileSystem#_getFileStatus'
      - 'azure-arm-datalake-store.FileSystem#_append'
      - 'azure-arm-datalake-store.FileSystem#_create'
      - 'azure-arm-datalake-store.FileSystem#_open'
      - 'azure-arm-datalake-store.FileSystem#_setAcl'
      - 'azure-arm-datalake-store.FileSystem#_modifyAclEntries'
      - 'azure-arm-datalake-store.FileSystem#_removeAclEntries'
      - 'azure-arm-datalake-store.FileSystem#_removeDefaultAcl'
      - 'azure-arm-datalake-store.FileSystem#_removeAcl'
      - 'azure-arm-datalake-store.FileSystem#_getAclStatus'
      - 'azure-arm-datalake-store.FileSystem#_deleteMethod'
      - 'azure-arm-datalake-store.FileSystem#_rename'
      - 'azure-arm-datalake-store.FileSystem#_setOwner'
      - 'azure-arm-datalake-store.FileSystem#_setPermission'
      - >-
        azure-arm-datalake-store.FileSystem#concurrentAppendWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#concurrentAppend'
      - >-
        azure-arm-datalake-store.FileSystem#setFileExpiryWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#setFileExpiry'
      - 'azure-arm-datalake-store.FileSystem#checkAccessWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#checkAccess'
      - 'azure-arm-datalake-store.FileSystem#mkdirsWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#mkdirs'
      - 'azure-arm-datalake-store.FileSystem#concatWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#concat'
      - 'azure-arm-datalake-store.FileSystem#msConcatWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#msConcat'
      - >-
        azure-arm-datalake-store.FileSystem#listFileStatusWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#listFileStatus'
      - >-
        azure-arm-datalake-store.FileSystem#getContentSummaryWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#getContentSummary'
      - >-
        azure-arm-datalake-store.FileSystem#getFileStatusWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#getFileStatus'
      - 'azure-arm-datalake-store.FileSystem#appendWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#append'
      - 'azure-arm-datalake-store.FileSystem#createWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#create'
      - 'azure-arm-datalake-store.FileSystem#openWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#open'
      - 'azure-arm-datalake-store.FileSystem#setAclWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#setAcl'
      - >-
        azure-arm-datalake-store.FileSystem#modifyAclEntriesWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#modifyAclEntries'
      - >-
        azure-arm-datalake-store.FileSystem#removeAclEntriesWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#removeAclEntries'
      - >-
        azure-arm-datalake-store.FileSystem#removeDefaultAclWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#removeDefaultAcl'
      - 'azure-arm-datalake-store.FileSystem#removeAclWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#removeAcl'
      - >-
        azure-arm-datalake-store.FileSystem#getAclStatusWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#getAclStatus'
      - >-
        azure-arm-datalake-store.FileSystem#deleteMethodWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#deleteMethod'
      - 'azure-arm-datalake-store.FileSystem#renameWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#rename'
      - 'azure-arm-datalake-store.FileSystem#setOwnerWithHttpOperationResponse'
      - 'azure-arm-datalake-store.FileSystem#setOwner'
      - >-
        azure-arm-datalake-store.FileSystem#setPermissionWithHttpOperationResponse
      - 'azure-arm-datalake-store.FileSystem#setPermission'
  - id: 'azure-arm-datalake-store.FileSystem.#ctor'
    uid: 'azure-arm-datalake-store.FileSystem.#ctor'
    parent: azure-arm-datalake-store.FileSystem
    name: FileSystem()
    fullName: azure-arm-datalake-store.FileSystem.FileSystem()
    summary: ''
    type: Constructor
    syntax:
      content: new FileSystem()
  - uid: 'azure-arm-datalake-store.FileSystem#client'
    id: 'azure-arm-datalake-store.FileSystem#client'
    parent: azure-arm-datalake-store.FileSystem
    name: client
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem.client
    type: Field
    syntax:
      content: client
  - uid: 'azure-arm-datalake-store.FileSystem#_concurrentAppend'
    id: 'azure-arm-datalake-store.FileSystem#_concurrentAppend'
    parent: azure-arm-datalake-store.FileSystem
    name: _concurrentAppend
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._concurrentAppend
    type: Field
    syntax:
      content: _concurrentAppend
  - uid: 'azure-arm-datalake-store.FileSystem#_setFileExpiry'
    id: 'azure-arm-datalake-store.FileSystem#_setFileExpiry'
    parent: azure-arm-datalake-store.FileSystem
    name: _setFileExpiry
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._setFileExpiry
    type: Field
    syntax:
      content: _setFileExpiry
  - uid: 'azure-arm-datalake-store.FileSystem#_checkAccess'
    id: 'azure-arm-datalake-store.FileSystem#_checkAccess'
    parent: azure-arm-datalake-store.FileSystem
    name: _checkAccess
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._checkAccess
    type: Field
    syntax:
      content: _checkAccess
  - uid: 'azure-arm-datalake-store.FileSystem#_mkdirs'
    id: 'azure-arm-datalake-store.FileSystem#_mkdirs'
    parent: azure-arm-datalake-store.FileSystem
    name: _mkdirs
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._mkdirs
    type: Field
    syntax:
      content: _mkdirs
  - uid: 'azure-arm-datalake-store.FileSystem#_concat'
    id: 'azure-arm-datalake-store.FileSystem#_concat'
    parent: azure-arm-datalake-store.FileSystem
    name: _concat
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._concat
    type: Field
    syntax:
      content: _concat
  - uid: 'azure-arm-datalake-store.FileSystem#_msConcat'
    id: 'azure-arm-datalake-store.FileSystem#_msConcat'
    parent: azure-arm-datalake-store.FileSystem
    name: _msConcat
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._msConcat
    type: Field
    syntax:
      content: _msConcat
  - uid: 'azure-arm-datalake-store.FileSystem#_listFileStatus'
    id: 'azure-arm-datalake-store.FileSystem#_listFileStatus'
    parent: azure-arm-datalake-store.FileSystem
    name: _listFileStatus
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._listFileStatus
    type: Field
    syntax:
      content: _listFileStatus
  - uid: 'azure-arm-datalake-store.FileSystem#_getContentSummary'
    id: 'azure-arm-datalake-store.FileSystem#_getContentSummary'
    parent: azure-arm-datalake-store.FileSystem
    name: _getContentSummary
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._getContentSummary
    type: Field
    syntax:
      content: _getContentSummary
  - uid: 'azure-arm-datalake-store.FileSystem#_getFileStatus'
    id: 'azure-arm-datalake-store.FileSystem#_getFileStatus'
    parent: azure-arm-datalake-store.FileSystem
    name: _getFileStatus
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._getFileStatus
    type: Field
    syntax:
      content: _getFileStatus
  - uid: 'azure-arm-datalake-store.FileSystem#_append'
    id: 'azure-arm-datalake-store.FileSystem#_append'
    parent: azure-arm-datalake-store.FileSystem
    name: _append
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._append
    type: Field
    syntax:
      content: _append
  - uid: 'azure-arm-datalake-store.FileSystem#_create'
    id: 'azure-arm-datalake-store.FileSystem#_create'
    parent: azure-arm-datalake-store.FileSystem
    name: _create
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._create
    type: Field
    syntax:
      content: _create
  - uid: 'azure-arm-datalake-store.FileSystem#_open'
    id: 'azure-arm-datalake-store.FileSystem#_open'
    parent: azure-arm-datalake-store.FileSystem
    name: _open
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._open
    type: Field
    syntax:
      content: _open
  - uid: 'azure-arm-datalake-store.FileSystem#_setAcl'
    id: 'azure-arm-datalake-store.FileSystem#_setAcl'
    parent: azure-arm-datalake-store.FileSystem
    name: _setAcl
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._setAcl
    type: Field
    syntax:
      content: _setAcl
  - uid: 'azure-arm-datalake-store.FileSystem#_modifyAclEntries'
    id: 'azure-arm-datalake-store.FileSystem#_modifyAclEntries'
    parent: azure-arm-datalake-store.FileSystem
    name: _modifyAclEntries
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._modifyAclEntries
    type: Field
    syntax:
      content: _modifyAclEntries
  - uid: 'azure-arm-datalake-store.FileSystem#_removeAclEntries'
    id: 'azure-arm-datalake-store.FileSystem#_removeAclEntries'
    parent: azure-arm-datalake-store.FileSystem
    name: _removeAclEntries
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._removeAclEntries
    type: Field
    syntax:
      content: _removeAclEntries
  - uid: 'azure-arm-datalake-store.FileSystem#_removeDefaultAcl'
    id: 'azure-arm-datalake-store.FileSystem#_removeDefaultAcl'
    parent: azure-arm-datalake-store.FileSystem
    name: _removeDefaultAcl
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._removeDefaultAcl
    type: Field
    syntax:
      content: _removeDefaultAcl
  - uid: 'azure-arm-datalake-store.FileSystem#_removeAcl'
    id: 'azure-arm-datalake-store.FileSystem#_removeAcl'
    parent: azure-arm-datalake-store.FileSystem
    name: _removeAcl
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._removeAcl
    type: Field
    syntax:
      content: _removeAcl
  - uid: 'azure-arm-datalake-store.FileSystem#_getAclStatus'
    id: 'azure-arm-datalake-store.FileSystem#_getAclStatus'
    parent: azure-arm-datalake-store.FileSystem
    name: _getAclStatus
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._getAclStatus
    type: Field
    syntax:
      content: _getAclStatus
  - uid: 'azure-arm-datalake-store.FileSystem#_deleteMethod'
    id: 'azure-arm-datalake-store.FileSystem#_deleteMethod'
    parent: azure-arm-datalake-store.FileSystem
    name: _deleteMethod
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._deleteMethod
    type: Field
    syntax:
      content: _deleteMethod
  - uid: 'azure-arm-datalake-store.FileSystem#_rename'
    id: 'azure-arm-datalake-store.FileSystem#_rename'
    parent: azure-arm-datalake-store.FileSystem
    name: _rename
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._rename
    type: Field
    syntax:
      content: _rename
  - uid: 'azure-arm-datalake-store.FileSystem#_setOwner'
    id: 'azure-arm-datalake-store.FileSystem#_setOwner'
    parent: azure-arm-datalake-store.FileSystem
    name: _setOwner
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._setOwner
    type: Field
    syntax:
      content: _setOwner
  - uid: 'azure-arm-datalake-store.FileSystem#_setPermission'
    id: 'azure-arm-datalake-store.FileSystem#_setPermission'
    parent: azure-arm-datalake-store.FileSystem
    name: _setPermission
    summary: ''
    fullName: azure-arm-datalake-store.FileSystem._setPermission
    type: Field
    syntax:
      content: _setPermission
  - uid: >-
      azure-arm-datalake-store.FileSystem#concurrentAppendWithHttpOperationResponse
    id: >-
      azure-arm-datalake-store.FileSystem#concurrentAppendWithHttpOperationResponse
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      concurrentAppendWithHttpOperationResponse(accountName, filePath,
      streamContents, options)
    summary: >-
      Appends to the specified file, optionally first creating the file if it
      does

      not yet exist. This method supports multiple concurrent appends to the
      file.

      NOTE: The target must not contain data added by Create or normal (serial)

      Append. ConcurrentAppend and Append cannot be used interchangeably; once a

      target file has been modified using either of these append options, the

      other append option cannot be used on the target file. ConcurrentAppend
      does

      not guarantee order and can result in duplicated data landing in the
      target

      file.
    fullName: >-
      azure-arm-datalake-store.FileSystem.concurrentAppendWithHttpOperationResponse(accountName,
      filePath, streamContents, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: filePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            file to which to append using concurrent append.
        - id: streamContents
          type:
            - object
          description: |-
            The file contents to include when appending
            to the file.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.appendMode
          type:
            - string
          description: >-
            Indicates the concurrent append call

            should create the file if it doesn't exist or just open the existing
            file

            for append. Possible values include: 'autocreate'
          optional: true
        - id: options.syncFlag
          type:
            - string
          description: >-
            Optionally indicates what to do after

            completion of the concurrent append. DATA indicates more data is
            coming so

            no sync takes place, METADATA indicates a sync should be done to
            refresh

            metadata of the file only. CLOSE indicates that both the stream and
            metadata

            should be refreshed upon append completion. Possible values include:
            'DATA',

            'METADATA', 'CLOSE'
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function concurrentAppendWithHttpOperationResponse(accountName,
        filePath, streamContents, options)
  - uid: 'azure-arm-datalake-store.FileSystem#concurrentAppend'
    id: 'azure-arm-datalake-store.FileSystem#concurrentAppend'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      concurrentAppend(accountName, filePath, streamContents, options,
      optionalCallback)
    summary: >-
      Appends to the specified file, optionally first creating the file if it
      does

      not yet exist. This method supports multiple concurrent appends to the
      file.

      NOTE: The target must not contain data added by Create or normal (serial)

      Append. ConcurrentAppend and Append cannot be used interchangeably; once a

      target file has been modified using either of these append options, the

      other append option cannot be used on the target file. ConcurrentAppend
      does

      not guarantee order and can result in duplicated data landing in the
      target

      file.
    fullName: >-
      azure-arm-datalake-store.FileSystem.concurrentAppend(accountName,
      filePath, streamContents, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: filePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            file to which to append using concurrent append.
        - id: streamContents
          type:
            - object
          description: |-
            The file contents to include when appending
            to the file.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.appendMode
          type:
            - string
          description: >-
            Indicates the concurrent append call

            should create the file if it doesn't exist or just open the existing
            file

            for append. Possible values include: 'autocreate'
          optional: true
        - id: options.syncFlag
          type:
            - string
          description: >-
            Optionally indicates what to do after

            completion of the concurrent append. DATA indicates more data is
            coming so

            no sync takes place, METADATA indicates a sync should be done to
            refresh

            metadata of the file only. CLOSE indicates that both the stream and
            metadata

            should be refreshed upon append completion. Possible values include:
            'DATA',

            'METADATA', 'CLOSE'
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function concurrentAppend(accountName, filePath, streamContents,
        options, optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#setFileExpiryWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#setFileExpiryWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      setFileExpiryWithHttpOperationResponse(accountName, filePath,
      expiryOption, options)
    summary: |-
      Sets or removes the expiration time on the specified file. This operation
      can only be executed against files. Folders are not supported.
    fullName: >-
      azure-arm-datalake-store.FileSystem.setFileExpiryWithHttpOperationResponse(accountName,
      filePath, expiryOption, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: filePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            file on which to set or remove the expiration time.
        - id: expiryOption
          type:
            - string
          description: >-
            Indicates the type of expiration to use for the

            file: 1. NeverExpire: ExpireTime is ignored. 2. RelativeToNow:
            ExpireTime is

            an integer in milliseconds representing the expiration date relative
            to when

            file expiration is updated. 3. RelativeToCreationDate: ExpireTime is
            an

            integer in milliseconds representing the expiration date relative to
            file

            creation. 4. Absolute: ExpireTime is an integer in milliseconds, as
            a Unix

            timestamp relative to 1/1/1970 00:00:00. Possible values include:

            'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.expireTime
          type:
            - number
          description: |-
            The time that the file will expire,
            corresponding to the ExpiryOption that was set.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function setFileExpiryWithHttpOperationResponse(accountName, filePath,
        expiryOption, options)
  - uid: 'azure-arm-datalake-store.FileSystem#setFileExpiry'
    id: 'azure-arm-datalake-store.FileSystem#setFileExpiry'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      setFileExpiry(accountName, filePath, expiryOption, options,
      optionalCallback)
    summary: |-
      Sets or removes the expiration time on the specified file. This operation
      can only be executed against files. Folders are not supported.
    fullName: >-
      azure-arm-datalake-store.FileSystem.setFileExpiry(accountName, filePath,
      expiryOption, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: filePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            file on which to set or remove the expiration time.
        - id: expiryOption
          type:
            - string
          description: >-
            Indicates the type of expiration to use for the

            file: 1. NeverExpire: ExpireTime is ignored. 2. RelativeToNow:
            ExpireTime is

            an integer in milliseconds representing the expiration date relative
            to when

            file expiration is updated. 3. RelativeToCreationDate: ExpireTime is
            an

            integer in milliseconds representing the expiration date relative to
            file

            creation. 4. Absolute: ExpireTime is an integer in milliseconds, as
            a Unix

            timestamp relative to 1/1/1970 00:00:00. Possible values include:

            'NeverExpire', 'RelativeToNow', 'RelativeToCreationDate', 'Absolute'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.expireTime
          type:
            - number
          description: |-
            The time that the file will expire,
            corresponding to the ExpiryOption that was set.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function setFileExpiry(accountName, filePath, expiryOption, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#checkAccessWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#checkAccessWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'checkAccessWithHttpOperationResponse(accountName, path, fsaction, options)'
    summary: Checks if the specified access is available at the given path.
    fullName: >-
      azure-arm-datalake-store.FileSystem.checkAccessWithHttpOperationResponse(accountName,
      path, fsaction, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            file or directory for which to check access.
        - id: fsaction
          type:
            - string
          description: |-
            File system operation read/write/execute in string
            form, matching regex pattern '[rwx-]{3}'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function checkAccessWithHttpOperationResponse(accountName, path,
        fsaction, options)
  - uid: 'azure-arm-datalake-store.FileSystem#checkAccess'
    id: 'azure-arm-datalake-store.FileSystem#checkAccess'
    parent: azure-arm-datalake-store.FileSystem
    name: 'checkAccess(accountName, path, fsaction, options, optionalCallback)'
    summary: Checks if the specified access is available at the given path.
    fullName: >-
      azure-arm-datalake-store.FileSystem.checkAccess(accountName, path,
      fsaction, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            file or directory for which to check access.
        - id: fsaction
          type:
            - string
          description: |-
            File system operation read/write/execute in string
            form, matching regex pattern '[rwx-]{3}'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function checkAccess(accountName, path, fsaction, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#mkdirsWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#mkdirsWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'mkdirsWithHttpOperationResponse(accountName, path, options)'
    summary: Creates a directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.mkdirsWithHttpOperationResponse(accountName,
      path, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            directory to create.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.permission
          type:
            - number
          description: |-
            Optional octal permission with which
            the directory should be created.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: 'function mkdirsWithHttpOperationResponse(accountName, path, options)'
  - uid: 'azure-arm-datalake-store.FileSystem#mkdirs'
    id: 'azure-arm-datalake-store.FileSystem#mkdirs'
    parent: azure-arm-datalake-store.FileSystem
    name: 'mkdirs(accountName, path, options, optionalCallback)'
    summary: Creates a directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.mkdirs(accountName, path, options,
      optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: path
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            directory to create.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.permission
          type:
            - number
          description: |-
            Optional octal permission with which
            the directory should be created.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function mkdirs(accountName, path, options, optionalCallback)'
  - uid: 'azure-arm-datalake-store.FileSystem#concatWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#concatWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      concatWithHttpOperationResponse(accountName, destinationPath, sources,
      options)
    summary: |-
      Concatenates the list of source files into the destination file, removing
      all source files upon success.
    fullName: >-
      azure-arm-datalake-store.FileSystem.concatWithHttpOperationResponse(accountName,
      destinationPath, sources, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: destinationPath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the destination file resulting from the concatenation.
        - id: sources
          type:
            - array
          description: >-
            A list of comma separated Data Lake Store paths

            (starting with '/') of the files to concatenate, in the order in
            which they

            should be concatenated.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function concatWithHttpOperationResponse(accountName, destinationPath,
        sources, options)
  - uid: 'azure-arm-datalake-store.FileSystem#concat'
    id: 'azure-arm-datalake-store.FileSystem#concat'
    parent: azure-arm-datalake-store.FileSystem
    name: 'concat(accountName, destinationPath, sources, options, optionalCallback)'
    summary: |-
      Concatenates the list of source files into the destination file, removing
      all source files upon success.
    fullName: >-
      azure-arm-datalake-store.FileSystem.concat(accountName, destinationPath,
      sources, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: destinationPath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the destination file resulting from the concatenation.
        - id: sources
          type:
            - array
          description: >-
            A list of comma separated Data Lake Store paths

            (starting with '/') of the files to concatenate, in the order in
            which they

            should be concatenated.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function concat(accountName, destinationPath, sources, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#msConcatWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#msConcatWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      msConcatWithHttpOperationResponse(accountName, msConcatDestinationPath,
      streamContents, options)
    summary: |-
      Concatenates the list of source files into the destination file, deleting
      all source files upon success. This method accepts more source file paths
      than the Concat method. This method and the parameters it accepts are
      subject to change for usability in an upcoming version.
    fullName: >-
      azure-arm-datalake-store.FileSystem.msConcatWithHttpOperationResponse(accountName,
      msConcatDestinationPath, streamContents, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: msConcatDestinationPath
          type:
            - string
          description: |-
            The Data Lake Store path (starting
            with '/') of the destination file resulting from the concatenation.
        - id: streamContents
          type:
            - object
          description: >-
            A list of Data Lake Store paths (starting

            with '/') of the source files. Must be a comma-separated path list
            in the

            format:
            sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.deleteSourceDirectory
          type:
            - boolean
          description: >-
            Indicates that as an

            optimization instead of deleting each individual source stream,
            delete the

            source stream folder if all streams are in the same folder instead.
            This

            results in a substantial performance improvement when the only
            streams in

            the folder are part of the concatenation operation. WARNING: This
            includes

            the deletion of any other files that are not source files. Only set
            this to

            true when source files are the only files in the source directory.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function msConcatWithHttpOperationResponse(accountName,
        msConcatDestinationPath, streamContents, options)
  - uid: 'azure-arm-datalake-store.FileSystem#msConcat'
    id: 'azure-arm-datalake-store.FileSystem#msConcat'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      msConcat(accountName, msConcatDestinationPath, streamContents, options,
      optionalCallback)
    summary: |-
      Concatenates the list of source files into the destination file, deleting
      all source files upon success. This method accepts more source file paths
      than the Concat method. This method and the parameters it accepts are
      subject to change for usability in an upcoming version.
    fullName: >-
      azure-arm-datalake-store.FileSystem.msConcat(accountName,
      msConcatDestinationPath, streamContents, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: msConcatDestinationPath
          type:
            - string
          description: |-
            The Data Lake Store path (starting
            with '/') of the destination file resulting from the concatenation.
        - id: streamContents
          type:
            - object
          description: >-
            A list of Data Lake Store paths (starting

            with '/') of the source files. Must be a comma-separated path list
            in the

            format:
            sources=/file/path/1.txt,/file/path/2.txt,/file/path/lastfile.csv
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.deleteSourceDirectory
          type:
            - boolean
          description: >-
            Indicates that as an

            optimization instead of deleting each individual source stream,
            delete the

            source stream folder if all streams are in the same folder instead.
            This

            results in a substantial performance improvement when the only
            streams in

            the folder are part of the concatenation operation. WARNING: This
            includes

            the deletion of any other files that are not source files. Only set
            this to

            true when source files are the only files in the source directory.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function msConcat(accountName, msConcatDestinationPath, streamContents,
        options, optionalCallback)
  - uid: >-
      azure-arm-datalake-store.FileSystem#listFileStatusWithHttpOperationResponse
    id: >-
      azure-arm-datalake-store.FileSystem#listFileStatusWithHttpOperationResponse
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      listFileStatusWithHttpOperationResponse(accountName, listFilePath,
      options)
    summary: |-
      Get the list of file status objects specified by the file path, with
      optional pagination parameters
    fullName: >-
      azure-arm-datalake-store.FileSystem.listFileStatusWithHttpOperationResponse(accountName,
      listFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: listFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of
            the directory to list.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.listSize
          type:
            - number
          description: |-
            Gets or sets the number of items to
            return. Optional.
          optional: true
        - id: options.listAfter
          type:
            - string
          description: >-
            Gets or sets the item or lexographical

            index after which to begin returning results. For example, a file
            list of

            'a','b','d' and listAfter='b' will return 'd', and a listAfter='c'
            will also

            return 'd'. Optional.
          optional: true
        - id: options.listBefore
          type:
            - string
          description: >-
            Gets or sets the item or lexographical

            index before which to begin returning results. For example, a file
            list of

            'a','b','d' and listBefore='d' will return 'a','b', and a
            listBefore='c'

            will also return 'a','b'. Optional.
          optional: true
        - id: options.tooId
          type:
            - boolean
          description: >-
            An optional switch to return friendly names

            in place of owner and group. tooid=false returns friendly names
            instead of

            the AAD Object ID. Default value is true, returning AAD object IDs.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function listFileStatusWithHttpOperationResponse(accountName,
        listFilePath, options)
  - uid: 'azure-arm-datalake-store.FileSystem#listFileStatus'
    id: 'azure-arm-datalake-store.FileSystem#listFileStatus'
    parent: azure-arm-datalake-store.FileSystem
    name: 'listFileStatus(accountName, listFilePath, options, optionalCallback)'
    summary: |-
      Get the list of file status objects specified by the file path, with
      optional pagination parameters
    fullName: >-
      azure-arm-datalake-store.FileSystem.listFileStatus(accountName,
      listFilePath, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: listFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of
            the directory to list.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.listSize
          type:
            - number
          description: |-
            Gets or sets the number of items to
            return. Optional.
          optional: true
        - id: options.listAfter
          type:
            - string
          description: >-
            Gets or sets the item or lexographical

            index after which to begin returning results. For example, a file
            list of

            'a','b','d' and listAfter='b' will return 'd', and a listAfter='c'
            will also

            return 'd'. Optional.
          optional: true
        - id: options.listBefore
          type:
            - string
          description: >-
            Gets or sets the item or lexographical

            index before which to begin returning results. For example, a file
            list of

            'a','b','d' and listBefore='d' will return 'a','b', and a
            listBefore='c'

            will also return 'a','b'. Optional.
          optional: true
        - id: options.tooId
          type:
            - boolean
          description: >-
            An optional switch to return friendly names

            in place of owner and group. tooid=false returns friendly names
            instead of

            the AAD Object ID. Default value is true, returning AAD object IDs.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function listFileStatus(accountName, listFilePath, options,
        optionalCallback)
  - uid: >-
      azure-arm-datalake-store.FileSystem#getContentSummaryWithHttpOperationResponse
    id: >-
      azure-arm-datalake-store.FileSystem#getContentSummaryWithHttpOperationResponse
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      getContentSummaryWithHttpOperationResponse(accountName,
      getContentSummaryFilePath, options)
    summary: Gets the file content summary object specified by the file path.
    fullName: >-
      azure-arm-datalake-store.FileSystem.getContentSummaryWithHttpOperationResponse(accountName,
      getContentSummaryFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: getContentSummaryFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting
            with '/') of the file for which to retrieve the summary.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getContentSummaryWithHttpOperationResponse(accountName,
        getContentSummaryFilePath, options)
  - uid: 'azure-arm-datalake-store.FileSystem#getContentSummary'
    id: 'azure-arm-datalake-store.FileSystem#getContentSummary'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      getContentSummary(accountName, getContentSummaryFilePath, options,
      optionalCallback)
    summary: Gets the file content summary object specified by the file path.
    fullName: >-
      azure-arm-datalake-store.FileSystem.getContentSummary(accountName,
      getContentSummaryFilePath, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: getContentSummaryFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting
            with '/') of the file for which to retrieve the summary.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getContentSummary(accountName, getContentSummaryFilePath,
        options, optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#getFileStatusWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#getFileStatusWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'getFileStatusWithHttpOperationResponse(accountName, getFilePath, options)'
    summary: Get the file status object specified by the file path.
    fullName: >-
      azure-arm-datalake-store.FileSystem.getFileStatusWithHttpOperationResponse(accountName,
      getFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: getFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of
            the file or directory for which to retrieve the status.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.tooId
          type:
            - boolean
          description: >-
            An optional switch to return friendly names

            in place of owner and group. tooid=false returns friendly names
            instead of

            the AAD Object ID. Default value is true, returning AAD object IDs.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getFileStatusWithHttpOperationResponse(accountName,
        getFilePath, options)
  - uid: 'azure-arm-datalake-store.FileSystem#getFileStatus'
    id: 'azure-arm-datalake-store.FileSystem#getFileStatus'
    parent: azure-arm-datalake-store.FileSystem
    name: 'getFileStatus(accountName, getFilePath, options, optionalCallback)'
    summary: Get the file status object specified by the file path.
    fullName: >-
      azure-arm-datalake-store.FileSystem.getFileStatus(accountName,
      getFilePath, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: getFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of
            the file or directory for which to retrieve the status.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.tooId
          type:
            - boolean
          description: >-
            An optional switch to return friendly names

            in place of owner and group. tooid=false returns friendly names
            instead of

            the AAD Object ID. Default value is true, returning AAD object IDs.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getFileStatus(accountName, getFilePath, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#appendWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#appendWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      appendWithHttpOperationResponse(accountName, directFilePath,
      streamContents, options)
    summary: "Used for serial appends to the specified file.\_NOTE: The target must not\ncontain data added by ConcurrentAppend. ConcurrentAppend and Append cannot\nbe used interchangeably; once a target file has been modified using either\nof these append options, the other append option cannot be used on the\ntarget file."
    fullName: >-
      azure-arm-datalake-store.FileSystem.appendWithHttpOperationResponse(accountName,
      directFilePath, streamContents, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: directFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file to which to append.
        - id: streamContents
          type:
            - object
          description: |-
            The file contents to include when appending
            to the file.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.offset
          type:
            - number
          description: |-
            The optional offset in the stream to begin
            the append operation. Default is to append at the end of the stream.
          optional: true
        - id: options.syncFlag
          type:
            - string
          description: >-
            Optionally indicates what to do after

            completion of the append. DATA indicates more data is coming so no
            sync

            takes place, METADATA indicates a sync should be done to refresh
            metadata of

            the file only. CLOSE indicates that both the stream and metadata
            should be

            refreshed upon append completion. Possible values include: 'DATA',

            'METADATA', 'CLOSE'
          optional: true
        - id: options.leaseId
          type:
            - azure-arm-datalake-store.uuid
          description: >-
            Optional unique GUID per file to ensure

            single writer semantics, meaning that only clients that append to
            the file

            with the same leaseId will be allowed to do so.
          optional: true
        - id: options.fileSessionId
          type:
            - azure-arm-datalake-store.uuid
          description: >-
            Optional unique GUID per file

            indicating all the appends with the same fileSessionId are from the
            same

            client and same session. This will give a performance benefit when
            syncFlag

            is DATA or METADATA.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function appendWithHttpOperationResponse(accountName, directFilePath,
        streamContents, options)
  - uid: 'azure-arm-datalake-store.FileSystem#append'
    id: 'azure-arm-datalake-store.FileSystem#append'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      append(accountName, directFilePath, streamContents, options,
      optionalCallback)
    summary: "Used for serial appends to the specified file.\_NOTE: The target must not\ncontain data added by ConcurrentAppend. ConcurrentAppend and Append cannot\nbe used interchangeably; once a target file has been modified using either\nof these append options, the other append option cannot be used on the\ntarget file."
    fullName: >-
      azure-arm-datalake-store.FileSystem.append(accountName, directFilePath,
      streamContents, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: directFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file to which to append.
        - id: streamContents
          type:
            - object
          description: |-
            The file contents to include when appending
            to the file.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.offset
          type:
            - number
          description: |-
            The optional offset in the stream to begin
            the append operation. Default is to append at the end of the stream.
          optional: true
        - id: options.syncFlag
          type:
            - string
          description: >-
            Optionally indicates what to do after

            completion of the append. DATA indicates more data is coming so no
            sync

            takes place, METADATA indicates a sync should be done to refresh
            metadata of

            the file only. CLOSE indicates that both the stream and metadata
            should be

            refreshed upon append completion. Possible values include: 'DATA',

            'METADATA', 'CLOSE'
          optional: true
        - id: options.leaseId
          type:
            - azure-arm-datalake-store.uuid
          description: >-
            Optional unique GUID per file to ensure

            single writer semantics, meaning that only clients that append to
            the file

            with the same leaseId will be allowed to do so.
          optional: true
        - id: options.fileSessionId
          type:
            - azure-arm-datalake-store.uuid
          description: >-
            Optional unique GUID per file

            indicating all the appends with the same fileSessionId are from the
            same

            client and same session. This will give a performance benefit when
            syncFlag

            is DATA or METADATA.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function append(accountName, directFilePath, streamContents, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#createWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#createWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'createWithHttpOperationResponse(accountName, directFilePath, options)'
    summary: |-
      Creates a file with optionally specified content. NOTE: If content is
      provided, the resulting file cannot be modified using ConcurrentAppend.
    fullName: >-
      azure-arm-datalake-store.FileSystem.createWithHttpOperationResponse(accountName,
      directFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: directFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file to create.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.streamContents
          type:
            - object
          description: >-
            The file contents to include when

            creating the file. This parameter is optional, resulting in an empty
            file if

            not specified.
          optional: true
        - id: options.overwrite
          type:
            - boolean
          description: |-
            The indication of if the file should be
            overwritten.
          optional: true
        - id: options.syncFlag
          type:
            - string
          description: >-
            Optionally indicates what to do after

            completion of the append. DATA indicates more data is coming so no
            sync

            takes place, METADATA indicates a sync should be done to refresh
            metadata of

            the file only. CLOSE indicates that both the stream and metadata
            should be

            refreshed upon create completion. Possible values include: 'DATA',

            'METADATA', 'CLOSE'
          optional: true
        - id: options.leaseId
          type:
            - azure-arm-datalake-store.uuid
          description: >-
            Optional unique GUID per file to ensure

            single writer semantics, meaning that only clients that append to
            the file

            with the same leaseId will be allowed to do so.
          optional: true
        - id: options.permission
          type:
            - number
          description: >-
            The octal representation of the unnamed

            user, mask and other permissions that should be set for the file
            when

            created. If not specified, it inherits these from the container.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function createWithHttpOperationResponse(accountName, directFilePath,
        options)
  - uid: 'azure-arm-datalake-store.FileSystem#create'
    id: 'azure-arm-datalake-store.FileSystem#create'
    parent: azure-arm-datalake-store.FileSystem
    name: 'create(accountName, directFilePath, options, optionalCallback)'
    summary: |-
      Creates a file with optionally specified content. NOTE: If content is
      provided, the resulting file cannot be modified using ConcurrentAppend.
    fullName: >-
      azure-arm-datalake-store.FileSystem.create(accountName, directFilePath,
      options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: directFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file to create.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.streamContents
          type:
            - object
          description: >-
            The file contents to include when

            creating the file. This parameter is optional, resulting in an empty
            file if

            not specified.
          optional: true
        - id: options.overwrite
          type:
            - boolean
          description: |-
            The indication of if the file should be
            overwritten.
          optional: true
        - id: options.syncFlag
          type:
            - string
          description: >-
            Optionally indicates what to do after

            completion of the append. DATA indicates more data is coming so no
            sync

            takes place, METADATA indicates a sync should be done to refresh
            metadata of

            the file only. CLOSE indicates that both the stream and metadata
            should be

            refreshed upon create completion. Possible values include: 'DATA',

            'METADATA', 'CLOSE'
          optional: true
        - id: options.leaseId
          type:
            - azure-arm-datalake-store.uuid
          description: >-
            Optional unique GUID per file to ensure

            single writer semantics, meaning that only clients that append to
            the file

            with the same leaseId will be allowed to do so.
          optional: true
        - id: options.permission
          type:
            - number
          description: >-
            The octal representation of the unnamed

            user, mask and other permissions that should be set for the file
            when

            created. If not specified, it inherits these from the container.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function create(accountName, directFilePath, options, optionalCallback)'
  - uid: 'azure-arm-datalake-store.FileSystem#openWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#openWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'openWithHttpOperationResponse(accountName, directFilePath, options)'
    summary: Opens and reads from the specified file.
    fullName: >-
      azure-arm-datalake-store.FileSystem.openWithHttpOperationResponse(accountName,
      directFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: directFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file to open.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.length
          type:
            - number
          description: |-
            The number of bytes that the server will
            attempt to retrieve. It will retrieve <= length bytes.
          optional: true
        - id: options.offset
          type:
            - number
          description: The byte offset to start reading data from.
          optional: true
        - id: options.fileSessionId
          type:
            - azure-arm-datalake-store.uuid
          description: >-
            Optional unique GUID per file

            indicating all the reads with the same fileSessionId are from the
            same

            client and same session. This will give a performance benefit.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function openWithHttpOperationResponse(accountName, directFilePath,
        options)
  - uid: 'azure-arm-datalake-store.FileSystem#open'
    id: 'azure-arm-datalake-store.FileSystem#open'
    parent: azure-arm-datalake-store.FileSystem
    name: 'open(accountName, directFilePath, options, optionalCallback)'
    summary: Opens and reads from the specified file.
    fullName: >-
      azure-arm-datalake-store.FileSystem.open(accountName, directFilePath,
      options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: directFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file to open.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.length
          type:
            - number
          description: |-
            The number of bytes that the server will
            attempt to retrieve. It will retrieve <= length bytes.
          optional: true
        - id: options.offset
          type:
            - number
          description: The byte offset to start reading data from.
          optional: true
        - id: options.fileSessionId
          type:
            - azure-arm-datalake-store.uuid
          description: >-
            Optional unique GUID per file

            indicating all the reads with the same fileSessionId are from the
            same

            client and same session. This will give a performance benefit.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function open(accountName, directFilePath, options, optionalCallback)'
  - uid: 'azure-arm-datalake-store.FileSystem#setAclWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#setAclWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      setAclWithHttpOperationResponse(accountName, setAclFilePath, aclspec,
      options)
    summary: Sets the Access Control List (ACL) for a file or folder.
    fullName: >-
      azure-arm-datalake-store.FileSystem.setAclWithHttpOperationResponse(accountName,
      setAclFilePath, aclspec, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: setAclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file or directory on which to set the ACL.
        - id: aclspec
          type:
            - string
          description: |-
            The ACL spec included in ACL creation operations in
            the format '[default:]user|group|other::r|-w|-x|-'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function setAclWithHttpOperationResponse(accountName, setAclFilePath,
        aclspec, options)
  - uid: 'azure-arm-datalake-store.FileSystem#setAcl'
    id: 'azure-arm-datalake-store.FileSystem#setAcl'
    parent: azure-arm-datalake-store.FileSystem
    name: 'setAcl(accountName, setAclFilePath, aclspec, options, optionalCallback)'
    summary: Sets the Access Control List (ACL) for a file or folder.
    fullName: >-
      azure-arm-datalake-store.FileSystem.setAcl(accountName, setAclFilePath,
      aclspec, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: setAclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file or directory on which to set the ACL.
        - id: aclspec
          type:
            - string
          description: |-
            The ACL spec included in ACL creation operations in
            the format '[default:]user|group|other::r|-w|-x|-'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function setAcl(accountName, setAclFilePath, aclspec, options,
        optionalCallback)
  - uid: >-
      azure-arm-datalake-store.FileSystem#modifyAclEntriesWithHttpOperationResponse
    id: >-
      azure-arm-datalake-store.FileSystem#modifyAclEntriesWithHttpOperationResponse
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      modifyAclEntriesWithHttpOperationResponse(accountName, modifyAclFilePath,
      aclspec, options)
    summary: Modifies existing Access Control List (ACL) entries on a file or folder.
    fullName: >-
      azure-arm-datalake-store.FileSystem.modifyAclEntriesWithHttpOperationResponse(accountName,
      modifyAclFilePath, aclspec, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: modifyAclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with
            '/') of the file or directory with the ACL being modified.
        - id: aclspec
          type:
            - string
          description: |-
            The ACL specification included in ACL modification
            operations in the format '[default:]user|group|other::r|-w|-x|-'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function modifyAclEntriesWithHttpOperationResponse(accountName,
        modifyAclFilePath, aclspec, options)
  - uid: 'azure-arm-datalake-store.FileSystem#modifyAclEntries'
    id: 'azure-arm-datalake-store.FileSystem#modifyAclEntries'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      modifyAclEntries(accountName, modifyAclFilePath, aclspec, options,
      optionalCallback)
    summary: Modifies existing Access Control List (ACL) entries on a file or folder.
    fullName: >-
      azure-arm-datalake-store.FileSystem.modifyAclEntries(accountName,
      modifyAclFilePath, aclspec, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: modifyAclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with
            '/') of the file or directory with the ACL being modified.
        - id: aclspec
          type:
            - string
          description: |-
            The ACL specification included in ACL modification
            operations in the format '[default:]user|group|other::r|-w|-x|-'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function modifyAclEntries(accountName, modifyAclFilePath, aclspec,
        options, optionalCallback)
  - uid: >-
      azure-arm-datalake-store.FileSystem#removeAclEntriesWithHttpOperationResponse
    id: >-
      azure-arm-datalake-store.FileSystem#removeAclEntriesWithHttpOperationResponse
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      removeAclEntriesWithHttpOperationResponse(accountName, removeAclFilePath,
      aclspec, options)
    summary: Removes existing Access Control List (ACL) entries for a file or folder.
    fullName: >-
      azure-arm-datalake-store.FileSystem.removeAclEntriesWithHttpOperationResponse(accountName,
      removeAclFilePath, aclspec, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: removeAclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with
            '/') of the file or directory with the ACL being removed.
        - id: aclspec
          type:
            - string
          description: |-
            The ACL spec included in ACL removal operations in
            the format '[default:]user|group|other'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function removeAclEntriesWithHttpOperationResponse(accountName,
        removeAclFilePath, aclspec, options)
  - uid: 'azure-arm-datalake-store.FileSystem#removeAclEntries'
    id: 'azure-arm-datalake-store.FileSystem#removeAclEntries'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      removeAclEntries(accountName, removeAclFilePath, aclspec, options,
      optionalCallback)
    summary: Removes existing Access Control List (ACL) entries for a file or folder.
    fullName: >-
      azure-arm-datalake-store.FileSystem.removeAclEntries(accountName,
      removeAclFilePath, aclspec, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: removeAclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with
            '/') of the file or directory with the ACL being removed.
        - id: aclspec
          type:
            - string
          description: |-
            The ACL spec included in ACL removal operations in
            the format '[default:]user|group|other'
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function removeAclEntries(accountName, removeAclFilePath, aclspec,
        options, optionalCallback)
  - uid: >-
      azure-arm-datalake-store.FileSystem#removeDefaultAclWithHttpOperationResponse
    id: >-
      azure-arm-datalake-store.FileSystem#removeDefaultAclWithHttpOperationResponse
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      removeDefaultAclWithHttpOperationResponse(accountName, defaultAclFilePath,
      options)
    summary: |-
      Removes the existing Default Access Control List (ACL) of the specified
      directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.removeDefaultAclWithHttpOperationResponse(accountName,
      defaultAclFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: defaultAclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with
            '/') of the directory with the default ACL being removed.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function removeDefaultAclWithHttpOperationResponse(accountName,
        defaultAclFilePath, options)
  - uid: 'azure-arm-datalake-store.FileSystem#removeDefaultAcl'
    id: 'azure-arm-datalake-store.FileSystem#removeDefaultAcl'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      removeDefaultAcl(accountName, defaultAclFilePath, options,
      optionalCallback)
    summary: |-
      Removes the existing Default Access Control List (ACL) of the specified
      directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.removeDefaultAcl(accountName,
      defaultAclFilePath, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: defaultAclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with
            '/') of the directory with the default ACL being removed.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function removeDefaultAcl(accountName, defaultAclFilePath, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#removeAclWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#removeAclWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'removeAclWithHttpOperationResponse(accountName, aclFilePath, options)'
    summary: |-
      Removes the existing Access Control List (ACL) of the specified file or
      directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.removeAclWithHttpOperationResponse(accountName,
      aclFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: aclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of
            the file or directory with the ACL being removed.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function removeAclWithHttpOperationResponse(accountName, aclFilePath,
        options)
  - uid: 'azure-arm-datalake-store.FileSystem#removeAcl'
    id: 'azure-arm-datalake-store.FileSystem#removeAcl'
    parent: azure-arm-datalake-store.FileSystem
    name: 'removeAcl(accountName, aclFilePath, options, optionalCallback)'
    summary: |-
      Removes the existing Access Control List (ACL) of the specified file or
      directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.removeAcl(accountName, aclFilePath,
      options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: aclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of
            the file or directory with the ACL being removed.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function removeAcl(accountName, aclFilePath, options, optionalCallback)'
  - uid: 'azure-arm-datalake-store.FileSystem#getAclStatusWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#getAclStatusWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'getAclStatusWithHttpOperationResponse(accountName, aclFilePath, options)'
    summary: >-
      Gets Access Control List (ACL) entries for the specified file or
      directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.getAclStatusWithHttpOperationResponse(accountName,
      aclFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: aclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of
            the file or directory for which to get the ACL.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.tooId
          type:
            - boolean
          description: >-
            An optional switch to return friendly names

            in place of object ID for ACL entries. tooid=false returns friendly
            names

            instead of the AAD Object ID. Default value is true, returning AAD
            object

            IDs.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function getAclStatusWithHttpOperationResponse(accountName, aclFilePath,
        options)
  - uid: 'azure-arm-datalake-store.FileSystem#getAclStatus'
    id: 'azure-arm-datalake-store.FileSystem#getAclStatus'
    parent: azure-arm-datalake-store.FileSystem
    name: 'getAclStatus(accountName, aclFilePath, options, optionalCallback)'
    summary: >-
      Gets Access Control List (ACL) entries for the specified file or
      directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.getAclStatus(accountName, aclFilePath,
      options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: aclFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of
            the file or directory for which to get the ACL.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.tooId
          type:
            - boolean
          description: >-
            An optional switch to return friendly names

            in place of object ID for ACL entries. tooid=false returns friendly
            names

            instead of the AAD Object ID. Default value is true, returning AAD
            object

            IDs.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function getAclStatus(accountName, aclFilePath, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#deleteMethodWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#deleteMethodWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'deleteMethodWithHttpOperationResponse(accountName, filePath, options)'
    summary: 'Deletes the requested file or directory, optionally recursively.'
    fullName: >-
      azure-arm-datalake-store.FileSystem.deleteMethodWithHttpOperationResponse(accountName,
      filePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: filePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            file or directory to delete.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.recursive
          type:
            - boolean
          description: |-
            The optional switch indicating if the
            delete should be recursive
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function deleteMethodWithHttpOperationResponse(accountName, filePath,
        options)
  - uid: 'azure-arm-datalake-store.FileSystem#deleteMethod'
    id: 'azure-arm-datalake-store.FileSystem#deleteMethod'
    parent: azure-arm-datalake-store.FileSystem
    name: 'deleteMethod(accountName, filePath, options, optionalCallback)'
    summary: 'Deletes the requested file or directory, optionally recursively.'
    fullName: >-
      azure-arm-datalake-store.FileSystem.deleteMethod(accountName, filePath,
      options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: filePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/') of the
            file or directory to delete.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.recursive
          type:
            - boolean
          description: |-
            The optional switch indicating if the
            delete should be recursive
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: 'function deleteMethod(accountName, filePath, options, optionalCallback)'
  - uid: 'azure-arm-datalake-store.FileSystem#renameWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#renameWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      renameWithHttpOperationResponse(accountName, renameFilePath, destination,
      options)
    summary: Rename a file or directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.renameWithHttpOperationResponse(accountName,
      renameFilePath, destination, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: renameFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file or directory to move/rename.
        - id: destination
          type:
            - string
          description: The path to move/rename the file or folder to
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function renameWithHttpOperationResponse(accountName, renameFilePath,
        destination, options)
  - uid: 'azure-arm-datalake-store.FileSystem#rename'
    id: 'azure-arm-datalake-store.FileSystem#rename'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      rename(accountName, renameFilePath, destination, options,
      optionalCallback)
    summary: Rename a file or directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.rename(accountName, renameFilePath,
      destination, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: renameFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with '/')
            of the file or directory to move/rename.
        - id: destination
          type:
            - string
          description: The path to move/rename the file or folder to
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function rename(accountName, renameFilePath, destination, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#setOwnerWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#setOwnerWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: 'setOwnerWithHttpOperationResponse(accountName, setOwnerFilePath, options)'
    summary: Sets the owner of a file or directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.setOwnerWithHttpOperationResponse(accountName,
      setOwnerFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: setOwnerFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with
            '/') of the file or directory for which to set the owner.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.owner
          type:
            - string
          description: |-
            The AAD Object ID of the user owner of the
            file or directory. If empty, the property will remain unchanged.
          optional: true
        - id: options.group
          type:
            - string
          description: |-
            The AAD Object ID of the group owner of the
            file or directory. If empty, the property will remain unchanged.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function setOwnerWithHttpOperationResponse(accountName,
        setOwnerFilePath, options)
  - uid: 'azure-arm-datalake-store.FileSystem#setOwner'
    id: 'azure-arm-datalake-store.FileSystem#setOwner'
    parent: azure-arm-datalake-store.FileSystem
    name: 'setOwner(accountName, setOwnerFilePath, options, optionalCallback)'
    summary: Sets the owner of a file or directory.
    fullName: >-
      azure-arm-datalake-store.FileSystem.setOwner(accountName,
      setOwnerFilePath, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: setOwnerFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting with
            '/') of the file or directory for which to set the owner.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.owner
          type:
            - string
          description: |-
            The AAD Object ID of the user owner of the
            file or directory. If empty, the property will remain unchanged.
          optional: true
        - id: options.group
          type:
            - string
          description: |-
            The AAD Object ID of the group owner of the
            file or directory. If empty, the property will remain unchanged.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function setOwner(accountName, setOwnerFilePath, options,
        optionalCallback)
  - uid: 'azure-arm-datalake-store.FileSystem#setPermissionWithHttpOperationResponse'
    id: 'azure-arm-datalake-store.FileSystem#setPermissionWithHttpOperationResponse'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      setPermissionWithHttpOperationResponse(accountName, setPermissionFilePath,
      options)
    summary: Sets the permission of the file or folder.
    fullName: >-
      azure-arm-datalake-store.FileSystem.setPermissionWithHttpOperationResponse(accountName,
      setPermissionFilePath, options)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: setPermissionFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting
            with '/') of the file or directory for which to set the permission.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.permission
          type:
            - string
          description: |-
            A string representation of the
            permission (i.e 'rwx'). If empty, this property remains unchanged.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
      return:
        type:
          - Promise
        description: A promise is returned
      content: >-
        function setPermissionWithHttpOperationResponse(accountName,
        setPermissionFilePath, options)
  - uid: 'azure-arm-datalake-store.FileSystem#setPermission'
    id: 'azure-arm-datalake-store.FileSystem#setPermission'
    parent: azure-arm-datalake-store.FileSystem
    name: >-
      setPermission(accountName, setPermissionFilePath, options,
      optionalCallback)
    summary: Sets the permission of the file or folder.
    fullName: >-
      azure-arm-datalake-store.FileSystem.setPermission(accountName,
      setPermissionFilePath, options, optionalCallback)
    type: Method
    syntax:
      parameters:
        - id: accountName
          type:
            - string
          description: |-
            The Azure Data Lake Store account to execute
            filesystem operations on.
        - id: setPermissionFilePath
          type:
            - string
          description: |-
            The Data Lake Store path (starting
            with '/') of the file or directory for which to set the permission.
        - id: options
          type:
            - object
          description: Optional Parameters.
          optional: true
        - id: options.permission
          type:
            - string
          description: |-
            A string representation of the
            permission (i.e 'rwx'). If empty, this property remains unchanged.
          optional: true
        - id: options.customHeaders
          type:
            - object
          description: |-
            Headers that will be added to the
            request
          optional: true
        - id: optionalCallback
          type:
            - function
          description: The optional callback.
          optional: true
      return:
        type:
          - function
          - Promise
        description: |-
          If a callback was passed as the last parameter
          then it returns the callback else returns a Promise.

          {Promise} A promise is returned
      content: >-
        function setPermission(accountName, setPermissionFilePath, options,
        optionalCallback)
references:
  - uid: string
    name: string
    fullName: string
    isExternal: true
  - uid: object
    name: object
    fullName: object
    isExternal: true
  - uid: Promise
    name: Promise
    fullName: Promise
    isExternal: true
  - uid: function
    name: function
    fullName: function
    isExternal: true
  - uid: number
    name: number
    fullName: number
    isExternal: true
  - uid: array
    name: array
    fullName: array
    isExternal: true
  - uid: boolean
    name: boolean
    fullName: boolean
    isExternal: true
  - uid: azure-arm-datalake-store.uuid
    name: uuid
    fullName: azure-arm-datalake-store.uuid
    isExternal: true
